#!/bin/bash
set -euo pipefail

APP_USER="${app_user}"
WORKDIR="${working_dir}"
REPO_URL="${repo_url}"
SERVICE_NAME="${service_name}"
NODE_MAJOR="${node_version}"
USE_SECRET_MANAGER="${use_secret_manager}"
PROJECT_ID="${project_id}"
SECRET_ID="${secret_id}"
GITHUB_PAT_SECRET_ID="${github_pat_secret_id}"

log() {
  echo "[$(date --iso-8601=seconds)] $1"
}

if ! id -u "$${APP_USER}" >/dev/null 2>&1; then
  useradd --create-home --shell /bin/bash "$${APP_USER}"
fi

# keep startup fast and avoid long upgrades that can time out
export DEBIAN_FRONTEND=noninteractive

retry() { n=0; until "$@"; do n=$((n+1)); [ $n -ge 5 ] && return 1; echo "retry $n: $*"; sleep 5; done; }

retry apt-get update
retry apt-get install -y \
  ca-certificates \
  curl \
  git \
  gnupg \
  build-essential \
  python3

# Add swap (3GB) to avoid OOM during TypeScript build on e2-micro
if ! swapon --show | grep -q "/swapfile"; then
  fallocate -l 3G /swapfile || dd if=/dev/zero of=/swapfile bs=1M count=3072
  chmod 600 /swapfile
  mkswap /swapfile
  swapon /swapfile
  sysctl -w vm.swappiness=10 || true
  # persist across reboots if not already present
  if ! grep -q "^/swapfile" /etc/fstab; then
    echo "/swapfile none swap sw 0 0" >> /etc/fstab
  fi
fi

curl -fsSL "https://deb.nodesource.com/setup_$${NODE_MAJOR}.x" | bash -
DEBIAN_FRONTEND=noninteractive apt-get install -y nodejs

install -d -o "$${APP_USER}" -g "$${APP_USER}" "$${WORKDIR}"

# Install helper to refresh .env from Secret Manager before each start (place BEFORE unit creation)
cat >/usr/local/bin/fetch-env.sh <<'EOF'
#!/bin/bash
set -euo pipefail
APP_USER="$${1:-botuser}"
WORKDIR="$${2:-/opt/tatekae-seisan-bot}"
USE_SM="$${3:-false}"
PROJECT_ID="$${4:-}"
SECRET_ID="$${5:-}"

if [ "$${USE_SM}" = "true" ] && [ -n "$${SECRET_ID}" ]; then
  TOKEN=$(curl -s -H "Metadata-Flavor: Google" \
    "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token" \
    | python3 -c 'import json,sys; print(json.load(sys.stdin)["access_token"])')
  curl -s -H "Authorization: Bearer $${TOKEN}" \
    "https://secretmanager.googleapis.com/v1/projects/$${PROJECT_ID}/secrets/$${SECRET_ID}/versions/latest:access" \
    | python3 -c 'import json,sys; print(json.load(sys.stdin)["payload"]["data"])' \
    | base64 --decode > "$${WORKDIR}/.env"
  chown "$${APP_USER}:$${APP_USER}" "$${WORKDIR}/.env"
  chmod 600 "$${WORKDIR}/.env"
fi
exit 0
EOF
chmod 750 /usr/local/bin/fetch-env.sh

CLONE_URL="$${REPO_URL}"

if [ -n "$${GITHUB_PAT_SECRET_ID}" ]; then
  TOKEN=$(curl -s -H "Metadata-Flavor: Google" \
    "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token" \
    | python3 -c 'import json,sys; print(json.load(sys.stdin)["access_token"])')
  GITHUB_PAT=$(curl -s -H "Authorization: Bearer $${TOKEN}" \
    "https://secretmanager.googleapis.com/v1/projects/$${PROJECT_ID}/secrets/$${GITHUB_PAT_SECRET_ID}/versions/latest:access" \
    | python3 -c 'import json,sys; print(json.load(sys.stdin)["payload"]["data"])' \
    | base64 --decode)
  CLONE_URL=$(echo "$${REPO_URL}" | sed -E "s#^https://#https://x-access-token:$${GITHUB_PAT}@#")
fi

if [ ! -d "$${WORKDIR}/.git" ]; then
  runuser -u "$${APP_USER}" -- git clone "$${CLONE_URL}" "$${WORKDIR}"
else
  runuser -u "$${APP_USER}" -- git -C "$${WORKDIR}" pull --ff-only
fi

npminstall() {
  runuser -u "$${APP_USER}" -- npm --prefix "$${WORKDIR}" ci && return 0
  runuser -u "$${APP_USER}" -- npm --prefix "$${WORKDIR}" install && return 0
  return 1
}

retry npminstall
runuser -u "$${APP_USER}" -- env NODE_OPTIONS=--max-old-space-size=1536 npm --prefix "$${WORKDIR}" run build

cat <<EOF_SERVICE >/etc/systemd/system/$${SERVICE_NAME}.service
[Unit]
Description=Tatekae Seisan Bot
After=network.target

[Service]
Type=simple
WorkingDirectory=$${WORKDIR}
EnvironmentFile=$${WORKDIR}/.env
ExecStartPre=/usr/local/bin/fetch-env.sh $${APP_USER} $${WORKDIR} $${USE_SECRET_MANAGER} $${PROJECT_ID} $${SECRET_ID}
ExecStart=/usr/bin/node dist/index.js
Restart=always
User=$${APP_USER}

[Install]
WantedBy=multi-user.target
EOF_SERVICE

chown root:root /etc/systemd/system/$${SERVICE_NAME}.service
chmod 644 /etc/systemd/system/$${SERVICE_NAME}.service

if [ "$${USE_SECRET_MANAGER}" = "true" ] && [ -n "$${SECRET_ID}" ]; then
  TOKEN=$(curl -s -H "Metadata-Flavor: Google" \
    "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token" \
    | python3 -c 'import json,sys; print(json.load(sys.stdin)["access_token"])')
  curl -s -H "Authorization: Bearer $${TOKEN}" \
    "https://secretmanager.googleapis.com/v1/projects/$${PROJECT_ID}/secrets/$${SECRET_ID}/versions/latest:access" \
    | python3 -c 'import json,sys; print(json.load(sys.stdin)["payload"]["data"])' \
    | base64 --decode > "$${WORKDIR}/.env"
  chown "$${APP_USER}:$${APP_USER}" "$${WORKDIR}/.env"
  chmod 600 "$${WORKDIR}/.env"
  log "Fetched .env from Secret Manager secret $${SECRET_ID}."
else
  if [ ! -f "$${WORKDIR}/.env" ]; then
    cat <<'EOF_ENV' > "$${WORKDIR}/.env"
# TODO: Populate this file with Slack and Google credentials before starting the bot.
EOF_ENV
    chown "$${APP_USER}:$${APP_USER}" "$${WORKDIR}/.env"
    chmod 600 "$${WORKDIR}/.env"
    log "Created placeholder $${WORKDIR}/.env; replace with real secrets."
  fi
fi

systemctl daemon-reload
systemctl enable --now "$${SERVICE_NAME}"
